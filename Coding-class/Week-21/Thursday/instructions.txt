*01-Stu_FormalReview*

In this activity we will review using forms with React

*Instructions*

* Replace your React application's src folder with [Unsolved/src](Unsolved/src)

* Start the application in dev mode by running `yarn start` in your terminal.

* Open your browser to [localhost:3000](http://localhost:3000) and study the rendered application.

* Update this application to accomplish the following:

 -- When the user types into the input fields, the values should be captured to the component’s state.
 
 -- When the form is submitted, throw an alert for the user displaying their chosen username and password values. Then clear the input fields.

*Hints*

* Check out the [React documentation on Forms](https://facebook.github.io/react/docs/forms.html)

====================================================

Presentational and Container Components – Dan Abramov – Medium
https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0

===================================================

*03-Stu_AJAX*

In this activity we will create a simple React application with which users can query the OMDB API and display information about the movie searched for.

*Instructions*

* Replace your React application's `src` folder with [Unsolved/src](Unsolved/src).

* This example uses Bootstrap, so be sure to add the Bootstrap CDN to your application's `index.html` file. You may use the following snippet below:

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css"/>```

* Be sure to install the axios library by running `yarn add axios` in your terminal.

* Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`.

* Open your browser to [localhost:3000](http://localhost:3000) and study the rendered application.

* This application is supposed to allow users to search for the name of a movie via the form on the right of the page, and display information from the OMDB API on the left side. Currently the application isn't fully functional.

* Open the `src/OmdbContainer.js` and add the following code:

 * Add a `componentDidMount` method which should utilize the `API.js` module to query the OMDB API for the movie "The Matrix" when the component mounts. Then update this component's `result` state with the result of the AJAX request. You can verify you completed this step correctly by refreshing the page in your web browser. If successful, the application should display information about the movie "The Matrix" when the page first loads.

 * Add a `handleInputChange` method which should be called whenever the user types into the input field. Inside of this method, set `this.state.search` equal to the new value of the input field. You can verify you've completed this step correctly if you can now type into the input field.

 * Add a `handleFormSubmit` method which should be called when the form is submitted. Inside of this method, utilize the `API` module to search the OMDB API for the value of `this.state.search`. Then update this component's `result` state with the result. You can verify you completed this step correctly by searching for the name of a movie. If successful, you should see the movie poster and some information about the movie appear in the left panel.

*Bonus*

* After you get the rest of the application code working, add code so that if no movie results are found, a message is displayed indicating this in place of the `MovieDetail` component. Otherwise display the `MovieDetail` component. You can verify you completed this step correctly by searching for an empty string. If successful, you should see your message being displayed instead of any movie information.

*Hints*

* Don't forget to call `event.preventDefault()` inside of any event handlers called in response to an HTML form being submitted.

* The only code you need to modify is inside of `OmdbContainer.js`.

* If you make it to the bonus, check out [React's Documentation on Conditional Rendering](https://facebook.github.io/react/docs/conditional-rendering.html). Use any of the techniques described to complete the bonus.

=====================================================================

*04-Stu_ConditionalRender*

In this activity we will render one of four different components based upon our component's state.

*Instructions*

* Replace your application's `src` folder with [Unsolved/src](Unsolved/src). Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`.

* This application uses Bootstrap, so make sure you're including the Bootstrap CSS CDN.
 
 
```html
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css"/>```
  

* Navigate to [localhost:3000](http://localhost:3000) in your web browser and take a moment to study the rendered application.

 -- At the top of the page there's a Bootstrap NavTabs component. Whenever a nav element is clicked, the nav element goes into an "active" state. Whenever a nav item is clicked, it sets `this.state.currentPage` inside of `PortfolioContainer` to the selected navigation item.

* Now add code to `PortfolioContainer` so that depending on the currently selected page, a different component is rendered underneath the `NavTabs` component. Example:

 -- Render the `About` component when `this.state.currentPage === "About"`
 
 -- Render the `Blog` component when `this.state.currentPage === "Blog"`

 -- Render the `Contact` component when `this.state.currentPage === "Contact"`

 -- Render the `Home` component when `this.state.currentPage === "Home"`

*Bonus*

* Inside of `src/components/NavTabs.js`, add code so that the `li` tag for the `currentPage` has the "active" class. This component receives the `currentPage` via props.

*Hints*

* Refer to [React's Documentation on Conditional Rendering](https://facebook.github.io/react/docs/conditional-rendering.html) if you get stuck.

* Consider defining a method which returns a different component based on the value of `this.state.currentPage`.

============================================

*06-Stu_PupsterApp*

In this activity we will work to create an entire React application from scratch, complete with routing and AJAX requests to the [Dog Ceo API](https://dog.ceo/dog-api/): an API for dog images.

*Instructions*

* Start by scaffolding out a new starter React app by running the following command in your terminal `create-react-app pupster`.

* cd into the `pupster` directory and run the following command to install React Router and Axios:

 
  ```yarn add axios react-router-dom```
  

* *Recommended:* Add the Bootstrap and Font Awesome CDNs to your application's `index.html` file:

 
```html
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css" />```
  

* Open [https://pupster.netlify.com/](https://pupster.netlify.com/) in your web browser and take a few moments to study the example application. You will be basing your Pupster app off of this example.

 * This example contains 3 routes:

   1. `/about`: A static welcome screen for visitors to the application.

   2. `/discover`: This page displays a photo of a random dog retrieved from the [Dog Ceo API](https://dog.ceo/dog-api/). This page contains 2 clickable buttons: one for passing or "thumbs-downing" a dog, and one for picking or "thumbs-upping" a dog. When either button is clicked, a new dog image is loaded from the API. If you "thumbs up" a dog, there is a 1 in 5 chance that the dog likes you too, and the friends count goes up by 1.

   3. `/search`: This page allows you to search the [Dog Ceo API](https://dog.ceo/dog-api/) for all dogs by breed. After a search is made, a list of all of the results appears underneath.

* Your Pupster app should implement each of these three pages and their basic functionality, **don't spend much time styling your app until you have completed everything else.**

* Your Pupster app should display a navigation bar that is present on every route.

* Begin with routing. For each route, render a different component for each page without worrying about building in any behaviors yet. Then work on implementing the most basic functionality for each page, one piece at a time.

*Bonus*

* Once you complete all of the basic functionality for this activity, work on adding additional styles and making it look great.

*Hints*

* Don't worry about styling or making things fancy at first. Just use Bootstrap classes and get the basic functionality for each page working. Get the app to work first, then come back and make it awesome.

* Use the <https://dog.ceo/api/breeds/image/random> endpoint to get a random dog image.

* Use the <https://dog.ceo/api/breed/hound/images> endpoint (replace "hound" with your breed of choice) endpoint to get an array of all available dog images of the selected breed.

* See <https://dog.ceo/api/breeds/list> for a list of all available dog breeds. You can test the `/search` page by searching for any of the breeds returned by this endpoint.

* Don't hesitate to refer back to the earlier examples from today.

* Utilize documentation if you're still unsure about how anything works:

 -- [Axios](https://github.com/mzabriskie/axios)
 
 -- [React Router](https://reacttraining.com/react-router/web/guides/philosophy)

 -- [React](https://facebook.github.io/react/docs/hello-world.html)

 -- [Dog Ceo](https://dog.ceo/dog-api/)

* Ask for help if you get stuck!

=================================================
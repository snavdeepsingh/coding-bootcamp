https://react-reacap.netlify.com/#/

====================================

*11-Stu_PropsCalculator*

In this activity we will write a component that can perform some arithmetic using passed props and render an element containing the result.

*Instructions*

* Replace your React application's `src` folder with [Unsolved/src](Unsolved/src). Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`.

* Open your web browser to [localhost:3000](http://localhost:3000). Take a moment to observe the rendered app.

* Open `src/components/Calculator.js` in your editor and take a moment to study the application's code.

* Write a component named "Math" and render one Math component in the place of each "?" mark.

* The Math component should perform some arithmetic using 3 props:

 * `num1` - a number

  *`operator` -  a string representing an arithmetic operator, e.g. "+", "-", "*", "/"

 * `num3` - a number

* The Math component should render the result of problem in a `span` tag. e.g. 19 + 341 = 360

*Hints*

* Check out [React's documentation for props](https://facebook.github.io/react/docs/components-and-props.html)

*Bonus*

* Using the [style tag](https://facebook.github.io/react/docs/dom-elements.html#style), set the font-size of the `span` rendered by the `Math` component to be the result of the arithmetic problem in pixels. e.g. the font-size of the `span` rendering the result of "19 + 341 = 360" should be 360 pixels.

=============================================


*12-Stu_PropsReview*

In this activity, we will modify a React application to make it more DRY through the use of props.

*Instructions*

* Replace your Create React App's `src` folder with the provided [src](Unsolved/src) folder.

* Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`. Open [localhost:3000](http://localhost:3000) in your web browser and take a moment to study the rendered app.

 ![Unfinished Diagram](Images/01-Unfinished-Diagram.png)

 * This application is the start of a friends list for a social network.

* Open `src/App.js` in your editor and notice how the `SpongebobCard`, `MrKrabsCard`, and `SquidwardCard` are being rendered inside of `Wrapper`, which is in turn being rendered inside of the `App` component.

* Open up each component's files in turn and briefly study the JSX being returned by each. Most importantly, notice how all of the card components render very similar JSX. This isn't very DRY code. *We'll fix this by creating a brand new `FriendCard` component and rendering it once for each friend. We'll pass down the differentiating content in the form of props.*

 ![Finished Diagram](Images/02-Finished-Diagram.png)

* Take a moment to study the `src/friends.json` file. This file contains the data that makes each friend card unique from one another. We'll use this file to pass props down to our new `FriendCard` component.

* Import the `src/friends.json` file into `src/App.js`. This can be achieved with the following syntax:

 
```js
  import friends from "./friends.json";```
  

* Inside of `src/App.js`, remove the imports for each friend's card, and remove the JSX rendering each card inside of this file.

* Create a brand new component named `FriendCard`.

 - The `FriendCard` component can initially return the same JSX as `SpongebobCard`, and have its own CSS file named `FriendCard.css` which should have the same contents as `SpongbobCard.css`.

 - Require the `FriendCard` component inside of `src/App.js` and render it inside of the `Wrapper` component. Before going any further, check your browser. If successful, you should only see one card being rendered.

* Still inside of `src/App.js`, use the first friend object in the `friends` JSON file to pass the following props down to your rendered `FriendCard` component.

 - `name`

 - `image`

 - `occupation`

 - `location`

* Modify the `FriendCard` component so that it accepts and renders all of the passed props in place of the currently hard coded values. Once complete, check your browser to make sure the first `FriendCard` is still being properly rendered.

* Inside of `src/App.js`, render another `FriendCard` component for the second and third piece of friend data. Pass down the appropriate JSON data for each as props. If successful, you should see each friend being rendered to the browser, utilizing the same same `FriendCard` component three times.

*Hints*

* Check out [React's documentation on components & props](https://facebook.github.io/react/docs/components-and-props.html)

===============================================

*13-Stu_ComponentMap*

In this activity we will map over a list of data and render components from each piece of data.

*Instructions*

* Replace your React application's `src` folder with [src](Unsolved/src). Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`.

* This activity uses Bootstrap. Be sure to add the Bootstrap CDN to your React app's `index.html` file:

 
```html
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css"/>```
  

* Open the application in your web browser and study the rendered application. Then take a minute to study the included components:

 * *App*: Our Application's root component.

 * *List*: Responsible for rendering an unordered list from `props.data`.

* Modify the `List` component so that inside of its `ul` tags, it renders one `li` tag for each item in array of grocery objects being passed via props. Each `li` tag should display the `text` property of each grocery object. The array map method should be used for this.

* For styling purposes, give each `li` tag a class of `list-group-item`.

*Hints*

* You should definitely look at [React's documentation for lists and keys](https://facebook.github.io/react/docs/lists-and-keys.html)

* See MDN Documentation for [Array.prototype.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).

* You will only need to modify the `List` component.

*Bonus*

* Inside of the `List` component, render a list of **only** the groceries which **have not** been purchased. Use the [Array.prototype.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) to filter the array before mapping.

==================================================

*15-Stu_DecrementCounter*

In this activity we will add a "Decrement" button and click handler to the Click Counter application.

*Instructions*

* Copy the [src](Unsolved/src) folder into your Create React App boilerplate. Stop the dev server if it is already running. Start the app in dev mode by running `yarn start`.

* This example uses Bootstrap. Be sure to add the Bootstrap CDN to your `index.html` file.

 
```html
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css"/>```
  

* Open [localhost:3000](http://localhost:3000) in your web browser. This application's starter code is identical to the last example.

* Add code to the `Counter` component to add a `Decrement` button which _decreases_ the value of `this.state.count` by one each time it is clicked.

*Hints*

* Use the `Increment` button and event handler as a reference for creating the new button.

*Bonus*

* Inside of `Counter.js`, separate the `panel-body` element and its children into a new component named `PanelBody`. Render `PanelBody` inside of the `Counter` component and pass the `count` state and click handlers to the new component as props. The completed bonus should still increment or decrement the counter when the buttons are clicked.

==========================================================




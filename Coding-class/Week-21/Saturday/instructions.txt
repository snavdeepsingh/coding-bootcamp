*08-Stu_Recipes*

In this activity we will render a list of recipes retrieved via an AJAX request.

*Instructions*

* Open [Unsolved](Unsolved) in your editor. From the root of the project folder, run `yarn install` to install the required dependencies.

* Run `yarn start` to start the React app and Express server. Visit [localhost:3000](http://localhost:3000) in your web browser to view the app.

* Enter a search term, e.g. "burgers" in the input field and submit. This won't have any visible affect on the page yet, but should submit an AJAX request and log the response to the console. Take a moment to study the response logged.

 ![Recipe Log](Images/01-RecipeLog.gif)

* The goal of this activity is to render these recipes to the DOM.

*Part 1*

* For this section the only file you will need to modify is `App.js`. Take a few moments to study the code in the file.

* Using the `RecipeList` and `RecipeListItem` components, add code to render the array of recipes where indicated in the file.

 * The `RecipeList` component renders a `ul` tag and accepts children. The `RecipeListItem` component renders an `li` tag with some formatting to hold the recipe's title, thumbnail, etc.

* Using a `RecipeList` component as a container, map over `this.state.recipes` and render one `RecipeListItem` component for each recipe object in `this.state.recipes`.

* Pass the rendered `RecipeListItem` components each property of their recipe object, i.e. :

 -- `title`

 -- `href`

 -- `ingredients`

 -- `thumbnail`

* Test your solution by searching for a recipe in your browser. If successful so far, you should see the following:

 ![Recipe Incomplete](Images/02-RecipeIncomplete.gif)

* No matter the search query, the same hard coded recipe is being rendered in each `RecipeListItem` component. We'll address this problem next!

*Part 2*

* If the previous section was completed correctly, the only file you should need to modify for this section is `RecipeListItem.js`.

* Currently the rendered `RecipeListItem` components are displaying hard coded recipe data. Modify the `RecipeListItem` component file so that it utilizes all of the passed props where appropriate. Look at the hard coded data to determine how each prop should be used.

* If completed successfully, searching for a recipe in your browser should render dynamic results relevant to the search.

 ![Recipe List](Images/03-RecipeList.gif)

*Hints*

* Check out the [React Documentation](https://facebook.github.io/react/docs/lists-and-keys.html) on rendering lists of components if you need a refresher on this.

* Rather than mapping over recipes and rendering primitive `ul` and `li` tags, you'll be using the pre-built `RecipeList` and `RecipeListItem` components.

* Ask for help if you're stuck!

*Bonus*

* Add code so that if a recipe doesn't come with a thumbnail url, use a placeholder image instead. Check out [placehold.it](https://placeholder.com/) for placeholder images.

* Add code so that if `this.state.recipes` is an empty array, render a message indicating that no recipes are available.

===============================================


*09-Stu_AJAXBooks*

In this activity we will add functionality to a full stack React application for retrieving books from a database.

*Instructions*

* Open the [Unsolved](Unsolved) folder in your editor and run `yarn install` at the project's root.

* This application uses a Mongo database, so be sure to start `mongod`.

* In order to initially populate the database, run the following command at the project root: `yarn seed`.

* This should insert a few records into the MongoDB.

* Run `yarn start` at the project root to start the application.

* Open your browser to [localhost:3000](http://localhost:3000) and take a moment to study the rendered application.
 
 * This example is a reading list application. Currently the app isn't fully functional.

* Open up `client/src/pages/Books.js` and add code so that when the component mounts, it performs an AJAX request to retrieve all of the books in the database. Once the AJAX request is complete, it should set `this.state.books` equal to the array of books.

* If successful, a list of books should be rendered on the right side of the page.

 * We'll work on making the form functional in the next activity.

*Hints*

* Use the API helper module (`client/src/utils/API.js`) to perform an AJAX request which should return _all_ of the books in the database.

* The only file you will need to modify is `client/src/pages/Books.js`.

==============================================

*10-Stu_AJAXFormDelete*

In this activity we will add functionality to the previous books example for submitting and deleting books from the database.

*Instructions*

* Open the [Unsolved](Unsolved) folder and install dependencies by running `yarn install` at the project root.

* Start the app by running `yarn start` from the project root.

* Once the app starts open your browser to [localhost:3000](http://localhost:3000).

* Open [Unsolved](Unsolved/client/src/pages/Books/Books.js).

*Part 1*

* Open the `Books.js` file. Add code so that `this.state.title`, `this.state.author`, and `this.state.synopsis` are updated as their corresponding `Input` components are updated (see the `name` properties on each `Input`). Any props you attach to the `Input` components will be passed down to their underlying elements, so there's no need to modify any code other than the code inside of `Books.js`.

* Add code so that when the `FormBtn` is clicked, an AJAX request is performed saving the new book. An object containing the new book's `title`, `author` and `synopsis` should be passed into the `API.saveBook` method.

*Part 2*

* Add code to the `Books.js` file so that when the `DeleteBtn` (`âœ—` button) component is clicked, its book is deleted from the database and the books displayed are updated. To accomplish this you should create a new method (`deleteBook`) on the `Books` component, which calls the `API.deleteBook` method when the `DeleteBtn` is clicked.

*Hints*

* The only file you need to modify is `Books.js`.

* See [React's Documentation on Handling Events](https://facebook.github.io/react/docs/handling-events.html)

==============================================

*11-Stu_ReactRouter*

In this activity we will add React Router to the Books application in order to render a book details page as well as a no match 404 page.

*Instructions*

* Open the [Unsolved](Unsolved) folder and install dependencies by running `yarn install` at the project root.

* Start the app by running `yarn start` from the project root.

* Once the app starts open your browser to [localhost:3000](http://localhost:3000).

* Open [App.js](Unsolved/client/src/App.js).

*Part 1*

* Set up React Router inside of the `client/src/App.js` file.

 * The `/` and `/books` routes should both render the `Books` component page.

*Part 2*

* Notice that inside of the `pages` folder we have a `NoMatch` component. This is the component for our 404 page.

* Add a route for the new `NoMatch` component. This should only render if no other routes are matched. e.g. `/sjdfhjsdhfjsa` or `/notarealroute/lalala` should both render the `NoMatch` component page.

 * You will need to use the `Switch` component from the React Router Dom library to accomplish this. An example can be found [here](https://reacttraining.com/react-router/web/example/no-match).

*Part 3*

* Notice that in the `pages` folder we have a `Detail` component. This component displays additional information about a book.

* Add a route for the the new `Detail` component. This should render when the `/books/:id` path is matched. e.g. if a book's `_id` is `59a39cf2549cf482c814333f`, then `/books/59a39cf2549cf482c814333f` should render its book `Detail` page.

* Inside of the `Detail` component, add code so that when the component mounts, we retrieve the book for the rendered route and save it to `this.state.book`. e.g. when the route is `/books/59a39cf2549cf482c814333f`, an AJAX request should be made to get the book with an `_id` of `59a39cf2549cf482c814333f`. If completed successfully, you should see the book's synopsis on this page.

 -- You may need to look into [URL params with React Router](https://reacttraining.com/react-router/web/example/url-params) to accomplish this.

 -- To access props in a class component you must use `this.props` instead of `props`.

*Hints*

* Parts 1 - 2 will only require you modify the `client/src/App.js` file.

* The React Router DOM library should already be installed.

* The React Router documentation is your friend!

* Ask the instructor or a TA if you're having difficulty understanding any of the activity requirements.

===============================================

*12-Stu_Deployment*

In this activity we will deploy the React Reading List application to Heroku.

*Instructions*

* Deploy the React Reading List application to Heroku. Make sure to perform the following:

 -- Initialize the project folder as a git repo.

 -- Create a Heroku app for the React Reading List App.

 -- Add a MongoLab Addon for the React Reading List Heroku app.

 -- Add and commit your changes before pushing up to heroku.

*Hints*

* Make sure you add and commit all changes before pushing up to Heroku.

* If your deployment fails, run `heroku logs` while in the project directory. This should print all of the logs produced from the failed deployment. Usually the issue can be found at the start of any errors.

* Ask an instructor or TA for help if you get stuck. Help your neighbor if you finish early!

===============================================

`git init`

`echo node_modules > .gitignore`
`echo node_modules > client/.gitignore`
`git add .` (edited)
`git commit -am "Initial Commit"`
`heroku create`
`heroku addons:create mongolab`
`git push heroku master`

============================================


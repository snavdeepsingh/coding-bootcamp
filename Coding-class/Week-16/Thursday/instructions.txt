* Update the `multiply` function so that it throws an error if either `x` or `y` is not a number.

* Inside of the `assertThrows` function, wrap the call to `func` with a try/catch block. If an error is thrown, log the error and set `threw` to true. At the end of the function, return `threw`.

* Ensure everything works by logging the result of `assertThrows` when passed in `multiply` and any two numbers. `false` should be printed to the console, meaning no error was thrown.

* Then, log the result of `assertThrows` when passed in `multiply` with any number number and any string. An error should be logged, followed by `true`, meaning an error was thrown and caught.

==========================================================================

*04-Disemvowel Instructions*

* Familiarize yourself with the Mocha and Chai documentation. Choose to read either the should, expect, or assert guide, and refer to it throughout the exercise.

* Consider a function, called `disemvowel`, which accepts a string and returns a version of the string without vowels.

* Your task is to use Chai to write a test suite for `disemvowel`. The catch is that you don't get an implementation yet. First,

 * With your partner, determine what a "representative example" of an input to `disemvowel` might be.

 * What do we expect to receive? What should the function return of this input?

 * What different formats can this sort of input take?

 * What _don't_ we expect? What should happen in this case? _Hint_: Just come up with something reasonable. We're not going to make you guess how we handled errors, so you don't have to write a test for this.

* When you think you're done, explain to your partner why the test you've written totally describes `disemvowel`. Be prepared to explain your test suite to the class.

================================================================================
